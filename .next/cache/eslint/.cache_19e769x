[{"/Users/antonzaharia/apps/potstop/pages/_app.js":"1","/Users/antonzaharia/apps/potstop/pages/api/answers.js":"2","/Users/antonzaharia/apps/potstop/pages/index.js":"3","/Users/antonzaharia/apps/potstop/components/Account.js":"4","/Users/antonzaharia/apps/potstop/components/Answer.js":"5","/Users/antonzaharia/apps/potstop/components/AnswerForm.js":"6","/Users/antonzaharia/apps/potstop/components/EthName.js":"7","/Users/antonzaharia/apps/potstop/components/Tip.js":"8","/Users/antonzaharia/apps/potstop/lib/web3.js":"9"},{"size":164,"mtime":1631738348000,"results":"10","hashOfConfig":"11"},{"size":2463,"mtime":1640277204225,"results":"12","hashOfConfig":"11"},{"size":4000,"mtime":1641824744058,"results":"13","hashOfConfig":"11"},{"size":497,"mtime":1640277700509,"results":"14","hashOfConfig":"11"},{"size":511,"mtime":1640275538648,"results":"15","hashOfConfig":"11"},{"size":1340,"mtime":1641825329593,"results":"16","hashOfConfig":"11"},{"size":1391,"mtime":1641824445098,"results":"17","hashOfConfig":"11"},{"size":710,"mtime":1640277368524,"results":"18","hashOfConfig":"11"},{"size":150,"mtime":1629578255000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9breo",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/antonzaharia/apps/potstop/pages/_app.js",[],"/Users/antonzaharia/apps/potstop/pages/api/answers.js",[],"/Users/antonzaharia/apps/potstop/pages/index.js",["40","41","42","43","44","45"],"// for next.js's <head> tag and rendering images\nimport Head from 'next/head'\nimport Image from 'next/image'\n\n// import the web3 library with setup from lib/web3.js\nimport { web3 } from '../lib/web3';\n\n// import react hooks\nimport { useState, useEffect } from 'react';\n\n// all from our components folder\nimport Account from '../components/Account'\nimport EthName from '../components/EthName'\nimport Answer from '../components/Answer'\nimport AnswerForm from '../components/AnswerForm'\n\nexport default function Home() {\n  // todo:\n  // 1. make the connect button work!\n  // 2. get the answers from the API (see /api/answers.js file)\n  // 3. add tipping like project 1\n  // 4. make the user name look good\n  // 5. let the user post their own reply\n\n  const [accounts, setAccounts] = useState([])\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n  const [answers, setAnswers] = useState([])\n\n  useEffect(() => {\n    if (accounts.length > 0) {\n      setIsLoggedIn(true)\n    } else {\n      setIsLoggedIn(false)\n    }\n  }, [accounts])\n\n  useEffect(async function() {\n    let a = await window.ethereum.request({ method: 'eth_accounts'})\n    setAccounts(a)\n\n    window.ethereum.on('accountsChanged', function(a) {\n      setAccounts(a)\n    })\n\n    fetch(\"/api/answers\")\n        .then(resp => resp.json())\n        .then(data => {\n          setAnswers(data.answers)\n          setIsLoading(false)\n        })\n  }, [])\n\n  let answersArea = (\n      <div className=\"loading\">Loading answers...</div>\n  )\n  if (!isLoading) {\n    answersArea = answers.map((answer, index) => {\n      return (\n          <Answer key={index + 1} number={index + 1} answer={answer} accounts={accounts} isLoggedIn={isLoggedIn} />\n      )\n    })\n  }\n\n  const connect = async function() {\n    let a = await window.ethereum.request({ method: \"eth_requestAccounts\" })\n    setAccounts(a)\n  }\n\n  return (\n    <main>\n      <header>\n        <h1>Potstop</h1>\n\n        <form>\n          <input type=\"text\" placeholder=\"Search\" />\n        </form>\n\n        <Account accounts={accounts} isLoggedIn={isLoggedIn} connect={connect} />\n      </header>\n\n      <section className=\"question\">\n        <div className=\"main\">\n          <h3>Feedback forum</h3>\n          <h2>Looking for feedback as a beginner</h2>\n          <p>Hey everyone, I&apos;m a new potter, just 4 weeks into my journey, and I&apos;m looking to get some feedback on what I&apos;ve made so far. I&apos;m particularly interested in how to make rustic looking bowls and pots, and I&apos;d love to know what the best tools to use would be!</p>\n\n          <div className=\"slides\">\n            <Image src=\"/image-1.jpg\" width=\"600\" height=\"800\" />\n            <Image src=\"/image-2.jpg\" width=\"600\" height=\"800\" />\n            <Image src=\"/image-3.jpg\" width=\"600\" height=\"800\" />\n            <Image src=\"/image-4.jpg\" width=\"600\" height=\"800\" />\n          </div>\n        </div>\n        <div className=\"meta\">\n          \n          {/* EthName */}\n          <div className=\"eth-name\">\n            <img src=\"https://ipfs.io/ipfs/QmbctVN8tPaDLiLysVDwThf7JTJhMejbSypZ4a3v5H2G3a\" alt=\"Avatar of riklomas.eth\" />\n            <div className=\"name\">\n              <span className=\"primary\">riklomas.eth</span>\n              <span className=\"secondary\">0xb25bf3...aaf4</span>\n            </div>\n          </div>\n          {/* end EthName */}\n\n        </div>\n      </section>\n\n      <section className=\"answers\">\n        {answersArea}\n        <AnswerForm accounts={accounts} setAnswers={setAnswers} isLoggedIn={isLoggedIn} />\n      </section>\n\n      <Head>\n        <title>Looking for feedback as a beginner – Feedback forum – Potstop </title>\n        <meta property=\"og:title\" content=\"Looking for feedback as a beginner on Potstop\" />\n        <meta property=\"og:description\" content=\"This is a project on the SuperHi Crypto + Web3 for Creatives course\" />\n        <meta property=\"og:image\" content=\"/social.png\" />\n      </Head>\n    </main>\n  )\n}\n","/Users/antonzaharia/apps/potstop/components/Account.js",[],"/Users/antonzaharia/apps/potstop/components/Answer.js",[],"/Users/antonzaharia/apps/potstop/components/AnswerForm.js",[],"/Users/antonzaharia/apps/potstop/components/EthName.js",["46","47","48","49"],"import { useState, useEffect } from \"react\"\nimport { web3 } from '../lib/web3';\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\nimport ENS, { getEnsAddress } from '@ensdomains/ensjs'\n\nconst ens = new ENS({\n    provider:  web3.currentProvider,\n    ensAddress: getEnsAddress('1')\n})\n\nconst EnsName = function ({ address }) {\n    const [name, setName] = useState()\n    const [avatar, setAvatar] = useState()\n\n    useEffect(async function () {\n        const n = await ens.getName(address)\n        if (n.name) {\n            setName(n.name)\n        }\n    }, [address])\n\n    useEffect(async function () {\n        if (name) {\n            const a = await ens.name(name).getText(\"avatar\")\n            if (a) {\n                setAvatar(a)\n            }\n        }\n    }, [name])\n\n  let formattedAddress = address.substr(0, 8) + '...' + address.substr(-4)\n\n    let icon = (\n        <Jazzicon diameter={32} seed={jsNumberForAddress(address)} />\n    )\n\n  return (\n    <div className=\"eth-name\">\n      <div className=\"icon\">\n          {avatar ? (\n              <img src={avatar} />\n          ) : icon}\n      </div>\n\n      <div className=\"name\">\n        <span className=\"primary\">\n          {name ? name : formattedAddress}\n        </span>\n        <span className=\"secondary\">\n          {name ? formattedAddress : ''}\n        </span>\n      </div>\n     \n    </div>\n  )\n}\n\nexport default EnsName","/Users/antonzaharia/apps/potstop/components/Tip.js",[],"/Users/antonzaharia/apps/potstop/lib/web3.js",[],{"ruleId":"50","severity":1,"message":"51","line":38,"column":13,"nodeType":"52","endLine":52,"endColumn":4},{"ruleId":"53","severity":1,"message":"54","line":89,"column":13,"nodeType":"55","endLine":89,"endColumn":66},{"ruleId":"53","severity":1,"message":"54","line":90,"column":13,"nodeType":"55","endLine":90,"endColumn":66},{"ruleId":"53","severity":1,"message":"54","line":91,"column":13,"nodeType":"55","endLine":91,"endColumn":66},{"ruleId":"53","severity":1,"message":"54","line":92,"column":13,"nodeType":"55","endLine":92,"endColumn":66},{"ruleId":"56","severity":1,"message":"57","line":99,"column":13,"nodeType":"55","endLine":99,"endColumn":123},{"ruleId":"50","severity":1,"message":"51","line":15,"column":15,"nodeType":"52","endLine":20,"endColumn":6},{"ruleId":"50","severity":1,"message":"51","line":22,"column":15,"nodeType":"52","endLine":29,"endColumn":6},{"ruleId":"56","severity":1,"message":"57","line":41,"column":15,"nodeType":"55","endLine":41,"endColumn":35},{"ruleId":"53","severity":1,"message":"58","line":41,"column":15,"nodeType":"55","endLine":41,"endColumn":35},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","FunctionExpression","jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See https://nextjs.org/docs/messages/no-img-element.","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]